// Code generated by Prisma (prisma@1.31.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  deck: (where?: DeckWhereInput) => Promise<boolean>;
  hanzi: (where?: HanziWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  deck: (where: DeckWhereUniqueInput) => DeckPromise;
  decks: (args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deck>;
  decksConnection: (args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DeckConnectionPromise;
  hanzi: (where: HanziWhereUniqueInput) => HanziPromise;
  hanzis: (args?: {
    where?: HanziWhereInput;
    orderBy?: HanziOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hanzi>;
  hanzisConnection: (args?: {
    where?: HanziWhereInput;
    orderBy?: HanziOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HanziConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDeck: (data: DeckCreateInput) => DeckPromise;
  updateDeck: (args: {
    data: DeckUpdateInput;
    where: DeckWhereUniqueInput;
  }) => DeckPromise;
  updateManyDecks: (args: {
    data: DeckUpdateManyMutationInput;
    where?: DeckWhereInput;
  }) => BatchPayloadPromise;
  upsertDeck: (args: {
    where: DeckWhereUniqueInput;
    create: DeckCreateInput;
    update: DeckUpdateInput;
  }) => DeckPromise;
  deleteDeck: (where: DeckWhereUniqueInput) => DeckPromise;
  deleteManyDecks: (where?: DeckWhereInput) => BatchPayloadPromise;
  createHanzi: (data: HanziCreateInput) => HanziPromise;
  updateHanzi: (args: {
    data: HanziUpdateInput;
    where: HanziWhereUniqueInput;
  }) => HanziPromise;
  updateManyHanzis: (args: {
    data: HanziUpdateManyMutationInput;
    where?: HanziWhereInput;
  }) => BatchPayloadPromise;
  upsertHanzi: (args: {
    where: HanziWhereUniqueInput;
    create: HanziCreateInput;
    update: HanziUpdateInput;
  }) => HanziPromise;
  deleteHanzi: (where: HanziWhereUniqueInput) => HanziPromise;
  deleteManyHanzis: (where?: HanziWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  deck: (
    where?: DeckSubscriptionWhereInput
  ) => DeckSubscriptionPayloadSubscription;
  hanzi: (
    where?: HanziSubscriptionWhereInput
  ) => HanziSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type HanziOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "traditional_ASC"
  | "traditional_DESC"
  | "simplified_ASC"
  | "simplified_DESC"
  | "referencedTraditional_ASC"
  | "referencedTraditional_DESC"
  | "referencedSimplified_ASC"
  | "referencedSimplified_DESC"
  | "pinyinNumeric_ASC"
  | "pinyinNumeric_DESC"
  | "pinyinDiacritic_ASC"
  | "pinyinDiacritic_DESC"
  | "definitions_ASC"
  | "definitions_DESC"
  | "definitionsDiacritic_ASC"
  | "definitionsDiacritic_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DeckOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DeckWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface HanziWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  traditional?: String;
  traditional_not?: String;
  traditional_in?: String[] | String;
  traditional_not_in?: String[] | String;
  traditional_lt?: String;
  traditional_lte?: String;
  traditional_gt?: String;
  traditional_gte?: String;
  traditional_contains?: String;
  traditional_not_contains?: String;
  traditional_starts_with?: String;
  traditional_not_starts_with?: String;
  traditional_ends_with?: String;
  traditional_not_ends_with?: String;
  simplified?: String;
  simplified_not?: String;
  simplified_in?: String[] | String;
  simplified_not_in?: String[] | String;
  simplified_lt?: String;
  simplified_lte?: String;
  simplified_gt?: String;
  simplified_gte?: String;
  simplified_contains?: String;
  simplified_not_contains?: String;
  simplified_starts_with?: String;
  simplified_not_starts_with?: String;
  simplified_ends_with?: String;
  simplified_not_ends_with?: String;
  referencedTraditional?: String;
  referencedTraditional_not?: String;
  referencedTraditional_in?: String[] | String;
  referencedTraditional_not_in?: String[] | String;
  referencedTraditional_lt?: String;
  referencedTraditional_lte?: String;
  referencedTraditional_gt?: String;
  referencedTraditional_gte?: String;
  referencedTraditional_contains?: String;
  referencedTraditional_not_contains?: String;
  referencedTraditional_starts_with?: String;
  referencedTraditional_not_starts_with?: String;
  referencedTraditional_ends_with?: String;
  referencedTraditional_not_ends_with?: String;
  referencedSimplified?: String;
  referencedSimplified_not?: String;
  referencedSimplified_in?: String[] | String;
  referencedSimplified_not_in?: String[] | String;
  referencedSimplified_lt?: String;
  referencedSimplified_lte?: String;
  referencedSimplified_gt?: String;
  referencedSimplified_gte?: String;
  referencedSimplified_contains?: String;
  referencedSimplified_not_contains?: String;
  referencedSimplified_starts_with?: String;
  referencedSimplified_not_starts_with?: String;
  referencedSimplified_ends_with?: String;
  referencedSimplified_not_ends_with?: String;
  pinyinNumeric?: String;
  pinyinNumeric_not?: String;
  pinyinNumeric_in?: String[] | String;
  pinyinNumeric_not_in?: String[] | String;
  pinyinNumeric_lt?: String;
  pinyinNumeric_lte?: String;
  pinyinNumeric_gt?: String;
  pinyinNumeric_gte?: String;
  pinyinNumeric_contains?: String;
  pinyinNumeric_not_contains?: String;
  pinyinNumeric_starts_with?: String;
  pinyinNumeric_not_starts_with?: String;
  pinyinNumeric_ends_with?: String;
  pinyinNumeric_not_ends_with?: String;
  pinyinDiacritic?: String;
  pinyinDiacritic_not?: String;
  pinyinDiacritic_in?: String[] | String;
  pinyinDiacritic_not_in?: String[] | String;
  pinyinDiacritic_lt?: String;
  pinyinDiacritic_lte?: String;
  pinyinDiacritic_gt?: String;
  pinyinDiacritic_gte?: String;
  pinyinDiacritic_contains?: String;
  pinyinDiacritic_not_contains?: String;
  pinyinDiacritic_starts_with?: String;
  pinyinDiacritic_not_starts_with?: String;
  pinyinDiacritic_ends_with?: String;
  pinyinDiacritic_not_ends_with?: String;
  definitions?: String;
  definitions_not?: String;
  definitions_in?: String[] | String;
  definitions_not_in?: String[] | String;
  definitions_lt?: String;
  definitions_lte?: String;
  definitions_gt?: String;
  definitions_gte?: String;
  definitions_contains?: String;
  definitions_not_contains?: String;
  definitions_starts_with?: String;
  definitions_not_starts_with?: String;
  definitions_ends_with?: String;
  definitions_not_ends_with?: String;
  definitionsDiacritic?: String;
  definitionsDiacritic_not?: String;
  definitionsDiacritic_in?: String[] | String;
  definitionsDiacritic_not_in?: String[] | String;
  definitionsDiacritic_lt?: String;
  definitionsDiacritic_lte?: String;
  definitionsDiacritic_gt?: String;
  definitionsDiacritic_gte?: String;
  definitionsDiacritic_contains?: String;
  definitionsDiacritic_not_contains?: String;
  definitionsDiacritic_starts_with?: String;
  definitionsDiacritic_not_starts_with?: String;
  definitionsDiacritic_ends_with?: String;
  definitionsDiacritic_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  usersBookmarked_every?: UserWhereInput;
  usersBookmarked_some?: UserWhereInput;
  usersBookmarked_none?: UserWhereInput;
  decksIncluded_every?: DeckWhereInput;
  decksIncluded_some?: DeckWhereInput;
  decksIncluded_none?: DeckWhereInput;
  AND?: HanziWhereInput[] | HanziWhereInput;
  OR?: HanziWhereInput[] | HanziWhereInput;
  NOT?: HanziWhereInput[] | HanziWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  bookmarkedHanzis_every?: HanziWhereInput;
  bookmarkedHanzis_some?: HanziWhereInput;
  bookmarkedHanzis_none?: HanziWhereInput;
  decks_every?: DeckWhereInput;
  decks_some?: DeckWhereInput;
  decks_none?: DeckWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface DeckWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  hanzis_every?: HanziWhereInput;
  hanzis_some?: HanziWhereInput;
  hanzis_none?: HanziWhereInput;
  creator?: UserWhereInput;
  AND?: DeckWhereInput[] | DeckWhereInput;
  OR?: DeckWhereInput[] | DeckWhereInput;
  NOT?: DeckWhereInput[] | DeckWhereInput;
}

export type HanziWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
}>;

export interface DeckCreateInput {
  name: String;
  hanzis?: HanziCreateManyWithoutDecksIncludedInput;
  creator: UserCreateOneWithoutDecksInput;
}

export interface HanziCreateManyWithoutDecksIncludedInput {
  create?:
    | HanziCreateWithoutDecksIncludedInput[]
    | HanziCreateWithoutDecksIncludedInput;
  connect?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
}

export interface HanziCreateWithoutDecksIncludedInput {
  traditional: String;
  simplified: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions: String;
  definitionsDiacritic?: String;
  usersBookmarked?: UserCreateManyWithoutBookmarkedHanzisInput;
}

export interface UserCreateManyWithoutBookmarkedHanzisInput {
  create?:
    | UserCreateWithoutBookmarkedHanzisInput[]
    | UserCreateWithoutBookmarkedHanzisInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutBookmarkedHanzisInput {
  username: String;
  email: String;
  password: String;
  decks?: DeckCreateManyWithoutCreatorInput;
}

export interface DeckCreateManyWithoutCreatorInput {
  create?: DeckCreateWithoutCreatorInput[] | DeckCreateWithoutCreatorInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
}

export interface DeckCreateWithoutCreatorInput {
  name: String;
  hanzis?: HanziCreateManyWithoutDecksIncludedInput;
}

export interface UserCreateOneWithoutDecksInput {
  create?: UserCreateWithoutDecksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutDecksInput {
  username: String;
  email: String;
  password: String;
  bookmarkedHanzis?: HanziCreateManyWithoutUsersBookmarkedInput;
}

export interface HanziCreateManyWithoutUsersBookmarkedInput {
  create?:
    | HanziCreateWithoutUsersBookmarkedInput[]
    | HanziCreateWithoutUsersBookmarkedInput;
  connect?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
}

export interface HanziCreateWithoutUsersBookmarkedInput {
  traditional: String;
  simplified: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions: String;
  definitionsDiacritic?: String;
  decksIncluded?: DeckCreateManyWithoutHanzisInput;
}

export interface DeckCreateManyWithoutHanzisInput {
  create?: DeckCreateWithoutHanzisInput[] | DeckCreateWithoutHanzisInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
}

export interface DeckCreateWithoutHanzisInput {
  name: String;
  creator: UserCreateOneWithoutDecksInput;
}

export interface DeckUpdateInput {
  name?: String;
  hanzis?: HanziUpdateManyWithoutDecksIncludedInput;
  creator?: UserUpdateOneRequiredWithoutDecksInput;
}

export interface HanziUpdateManyWithoutDecksIncludedInput {
  create?:
    | HanziCreateWithoutDecksIncludedInput[]
    | HanziCreateWithoutDecksIncludedInput;
  delete?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
  connect?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
  set?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
  disconnect?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
  update?:
    | HanziUpdateWithWhereUniqueWithoutDecksIncludedInput[]
    | HanziUpdateWithWhereUniqueWithoutDecksIncludedInput;
  upsert?:
    | HanziUpsertWithWhereUniqueWithoutDecksIncludedInput[]
    | HanziUpsertWithWhereUniqueWithoutDecksIncludedInput;
  deleteMany?: HanziScalarWhereInput[] | HanziScalarWhereInput;
  updateMany?:
    | HanziUpdateManyWithWhereNestedInput[]
    | HanziUpdateManyWithWhereNestedInput;
}

export interface HanziUpdateWithWhereUniqueWithoutDecksIncludedInput {
  where: HanziWhereUniqueInput;
  data: HanziUpdateWithoutDecksIncludedDataInput;
}

export interface HanziUpdateWithoutDecksIncludedDataInput {
  traditional?: String;
  simplified?: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions?: String;
  definitionsDiacritic?: String;
  usersBookmarked?: UserUpdateManyWithoutBookmarkedHanzisInput;
}

export interface UserUpdateManyWithoutBookmarkedHanzisInput {
  create?:
    | UserCreateWithoutBookmarkedHanzisInput[]
    | UserCreateWithoutBookmarkedHanzisInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBookmarkedHanzisInput[]
    | UserUpdateWithWhereUniqueWithoutBookmarkedHanzisInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBookmarkedHanzisInput[]
    | UserUpsertWithWhereUniqueWithoutBookmarkedHanzisInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutBookmarkedHanzisInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBookmarkedHanzisDataInput;
}

export interface UserUpdateWithoutBookmarkedHanzisDataInput {
  username?: String;
  email?: String;
  password?: String;
  decks?: DeckUpdateManyWithoutCreatorInput;
}

export interface DeckUpdateManyWithoutCreatorInput {
  create?: DeckCreateWithoutCreatorInput[] | DeckCreateWithoutCreatorInput;
  delete?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  set?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  disconnect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  update?:
    | DeckUpdateWithWhereUniqueWithoutCreatorInput[]
    | DeckUpdateWithWhereUniqueWithoutCreatorInput;
  upsert?:
    | DeckUpsertWithWhereUniqueWithoutCreatorInput[]
    | DeckUpsertWithWhereUniqueWithoutCreatorInput;
  deleteMany?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  updateMany?:
    | DeckUpdateManyWithWhereNestedInput[]
    | DeckUpdateManyWithWhereNestedInput;
}

export interface DeckUpdateWithWhereUniqueWithoutCreatorInput {
  where: DeckWhereUniqueInput;
  data: DeckUpdateWithoutCreatorDataInput;
}

export interface DeckUpdateWithoutCreatorDataInput {
  name?: String;
  hanzis?: HanziUpdateManyWithoutDecksIncludedInput;
}

export interface DeckUpsertWithWhereUniqueWithoutCreatorInput {
  where: DeckWhereUniqueInput;
  update: DeckUpdateWithoutCreatorDataInput;
  create: DeckCreateWithoutCreatorInput;
}

export interface DeckScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  OR?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  NOT?: DeckScalarWhereInput[] | DeckScalarWhereInput;
}

export interface DeckUpdateManyWithWhereNestedInput {
  where: DeckScalarWhereInput;
  data: DeckUpdateManyDataInput;
}

export interface DeckUpdateManyDataInput {
  name?: String;
}

export interface UserUpsertWithWhereUniqueWithoutBookmarkedHanzisInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBookmarkedHanzisDataInput;
  create: UserCreateWithoutBookmarkedHanzisInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  username?: String;
  email?: String;
  password?: String;
}

export interface HanziUpsertWithWhereUniqueWithoutDecksIncludedInput {
  where: HanziWhereUniqueInput;
  update: HanziUpdateWithoutDecksIncludedDataInput;
  create: HanziCreateWithoutDecksIncludedInput;
}

export interface HanziScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  traditional?: String;
  traditional_not?: String;
  traditional_in?: String[] | String;
  traditional_not_in?: String[] | String;
  traditional_lt?: String;
  traditional_lte?: String;
  traditional_gt?: String;
  traditional_gte?: String;
  traditional_contains?: String;
  traditional_not_contains?: String;
  traditional_starts_with?: String;
  traditional_not_starts_with?: String;
  traditional_ends_with?: String;
  traditional_not_ends_with?: String;
  simplified?: String;
  simplified_not?: String;
  simplified_in?: String[] | String;
  simplified_not_in?: String[] | String;
  simplified_lt?: String;
  simplified_lte?: String;
  simplified_gt?: String;
  simplified_gte?: String;
  simplified_contains?: String;
  simplified_not_contains?: String;
  simplified_starts_with?: String;
  simplified_not_starts_with?: String;
  simplified_ends_with?: String;
  simplified_not_ends_with?: String;
  referencedTraditional?: String;
  referencedTraditional_not?: String;
  referencedTraditional_in?: String[] | String;
  referencedTraditional_not_in?: String[] | String;
  referencedTraditional_lt?: String;
  referencedTraditional_lte?: String;
  referencedTraditional_gt?: String;
  referencedTraditional_gte?: String;
  referencedTraditional_contains?: String;
  referencedTraditional_not_contains?: String;
  referencedTraditional_starts_with?: String;
  referencedTraditional_not_starts_with?: String;
  referencedTraditional_ends_with?: String;
  referencedTraditional_not_ends_with?: String;
  referencedSimplified?: String;
  referencedSimplified_not?: String;
  referencedSimplified_in?: String[] | String;
  referencedSimplified_not_in?: String[] | String;
  referencedSimplified_lt?: String;
  referencedSimplified_lte?: String;
  referencedSimplified_gt?: String;
  referencedSimplified_gte?: String;
  referencedSimplified_contains?: String;
  referencedSimplified_not_contains?: String;
  referencedSimplified_starts_with?: String;
  referencedSimplified_not_starts_with?: String;
  referencedSimplified_ends_with?: String;
  referencedSimplified_not_ends_with?: String;
  pinyinNumeric?: String;
  pinyinNumeric_not?: String;
  pinyinNumeric_in?: String[] | String;
  pinyinNumeric_not_in?: String[] | String;
  pinyinNumeric_lt?: String;
  pinyinNumeric_lte?: String;
  pinyinNumeric_gt?: String;
  pinyinNumeric_gte?: String;
  pinyinNumeric_contains?: String;
  pinyinNumeric_not_contains?: String;
  pinyinNumeric_starts_with?: String;
  pinyinNumeric_not_starts_with?: String;
  pinyinNumeric_ends_with?: String;
  pinyinNumeric_not_ends_with?: String;
  pinyinDiacritic?: String;
  pinyinDiacritic_not?: String;
  pinyinDiacritic_in?: String[] | String;
  pinyinDiacritic_not_in?: String[] | String;
  pinyinDiacritic_lt?: String;
  pinyinDiacritic_lte?: String;
  pinyinDiacritic_gt?: String;
  pinyinDiacritic_gte?: String;
  pinyinDiacritic_contains?: String;
  pinyinDiacritic_not_contains?: String;
  pinyinDiacritic_starts_with?: String;
  pinyinDiacritic_not_starts_with?: String;
  pinyinDiacritic_ends_with?: String;
  pinyinDiacritic_not_ends_with?: String;
  definitions?: String;
  definitions_not?: String;
  definitions_in?: String[] | String;
  definitions_not_in?: String[] | String;
  definitions_lt?: String;
  definitions_lte?: String;
  definitions_gt?: String;
  definitions_gte?: String;
  definitions_contains?: String;
  definitions_not_contains?: String;
  definitions_starts_with?: String;
  definitions_not_starts_with?: String;
  definitions_ends_with?: String;
  definitions_not_ends_with?: String;
  definitionsDiacritic?: String;
  definitionsDiacritic_not?: String;
  definitionsDiacritic_in?: String[] | String;
  definitionsDiacritic_not_in?: String[] | String;
  definitionsDiacritic_lt?: String;
  definitionsDiacritic_lte?: String;
  definitionsDiacritic_gt?: String;
  definitionsDiacritic_gte?: String;
  definitionsDiacritic_contains?: String;
  definitionsDiacritic_not_contains?: String;
  definitionsDiacritic_starts_with?: String;
  definitionsDiacritic_not_starts_with?: String;
  definitionsDiacritic_ends_with?: String;
  definitionsDiacritic_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: HanziScalarWhereInput[] | HanziScalarWhereInput;
  OR?: HanziScalarWhereInput[] | HanziScalarWhereInput;
  NOT?: HanziScalarWhereInput[] | HanziScalarWhereInput;
}

export interface HanziUpdateManyWithWhereNestedInput {
  where: HanziScalarWhereInput;
  data: HanziUpdateManyDataInput;
}

export interface HanziUpdateManyDataInput {
  traditional?: String;
  simplified?: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions?: String;
  definitionsDiacritic?: String;
}

export interface UserUpdateOneRequiredWithoutDecksInput {
  create?: UserCreateWithoutDecksInput;
  update?: UserUpdateWithoutDecksDataInput;
  upsert?: UserUpsertWithoutDecksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutDecksDataInput {
  username?: String;
  email?: String;
  password?: String;
  bookmarkedHanzis?: HanziUpdateManyWithoutUsersBookmarkedInput;
}

export interface HanziUpdateManyWithoutUsersBookmarkedInput {
  create?:
    | HanziCreateWithoutUsersBookmarkedInput[]
    | HanziCreateWithoutUsersBookmarkedInput;
  delete?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
  connect?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
  set?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
  disconnect?: HanziWhereUniqueInput[] | HanziWhereUniqueInput;
  update?:
    | HanziUpdateWithWhereUniqueWithoutUsersBookmarkedInput[]
    | HanziUpdateWithWhereUniqueWithoutUsersBookmarkedInput;
  upsert?:
    | HanziUpsertWithWhereUniqueWithoutUsersBookmarkedInput[]
    | HanziUpsertWithWhereUniqueWithoutUsersBookmarkedInput;
  deleteMany?: HanziScalarWhereInput[] | HanziScalarWhereInput;
  updateMany?:
    | HanziUpdateManyWithWhereNestedInput[]
    | HanziUpdateManyWithWhereNestedInput;
}

export interface HanziUpdateWithWhereUniqueWithoutUsersBookmarkedInput {
  where: HanziWhereUniqueInput;
  data: HanziUpdateWithoutUsersBookmarkedDataInput;
}

export interface HanziUpdateWithoutUsersBookmarkedDataInput {
  traditional?: String;
  simplified?: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions?: String;
  definitionsDiacritic?: String;
  decksIncluded?: DeckUpdateManyWithoutHanzisInput;
}

export interface DeckUpdateManyWithoutHanzisInput {
  create?: DeckCreateWithoutHanzisInput[] | DeckCreateWithoutHanzisInput;
  delete?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  connect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  set?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  disconnect?: DeckWhereUniqueInput[] | DeckWhereUniqueInput;
  update?:
    | DeckUpdateWithWhereUniqueWithoutHanzisInput[]
    | DeckUpdateWithWhereUniqueWithoutHanzisInput;
  upsert?:
    | DeckUpsertWithWhereUniqueWithoutHanzisInput[]
    | DeckUpsertWithWhereUniqueWithoutHanzisInput;
  deleteMany?: DeckScalarWhereInput[] | DeckScalarWhereInput;
  updateMany?:
    | DeckUpdateManyWithWhereNestedInput[]
    | DeckUpdateManyWithWhereNestedInput;
}

export interface DeckUpdateWithWhereUniqueWithoutHanzisInput {
  where: DeckWhereUniqueInput;
  data: DeckUpdateWithoutHanzisDataInput;
}

export interface DeckUpdateWithoutHanzisDataInput {
  name?: String;
  creator?: UserUpdateOneRequiredWithoutDecksInput;
}

export interface DeckUpsertWithWhereUniqueWithoutHanzisInput {
  where: DeckWhereUniqueInput;
  update: DeckUpdateWithoutHanzisDataInput;
  create: DeckCreateWithoutHanzisInput;
}

export interface HanziUpsertWithWhereUniqueWithoutUsersBookmarkedInput {
  where: HanziWhereUniqueInput;
  update: HanziUpdateWithoutUsersBookmarkedDataInput;
  create: HanziCreateWithoutUsersBookmarkedInput;
}

export interface UserUpsertWithoutDecksInput {
  update: UserUpdateWithoutDecksDataInput;
  create: UserCreateWithoutDecksInput;
}

export interface DeckUpdateManyMutationInput {
  name?: String;
}

export interface HanziCreateInput {
  traditional: String;
  simplified: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions: String;
  definitionsDiacritic?: String;
  usersBookmarked?: UserCreateManyWithoutBookmarkedHanzisInput;
  decksIncluded?: DeckCreateManyWithoutHanzisInput;
}

export interface HanziUpdateInput {
  traditional?: String;
  simplified?: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions?: String;
  definitionsDiacritic?: String;
  usersBookmarked?: UserUpdateManyWithoutBookmarkedHanzisInput;
  decksIncluded?: DeckUpdateManyWithoutHanzisInput;
}

export interface HanziUpdateManyMutationInput {
  traditional?: String;
  simplified?: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions?: String;
  definitionsDiacritic?: String;
}

export interface UserCreateInput {
  username: String;
  email: String;
  password: String;
  bookmarkedHanzis?: HanziCreateManyWithoutUsersBookmarkedInput;
  decks?: DeckCreateManyWithoutCreatorInput;
}

export interface UserUpdateInput {
  username?: String;
  email?: String;
  password?: String;
  bookmarkedHanzis?: HanziUpdateManyWithoutUsersBookmarkedInput;
  decks?: DeckUpdateManyWithoutCreatorInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  email?: String;
  password?: String;
}

export interface DeckSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DeckWhereInput;
  AND?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
  OR?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
  NOT?: DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput;
}

export interface HanziSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: HanziWhereInput;
  AND?: HanziSubscriptionWhereInput[] | HanziSubscriptionWhereInput;
  OR?: HanziSubscriptionWhereInput[] | HanziSubscriptionWhereInput;
  NOT?: HanziSubscriptionWhereInput[] | HanziSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Deck {
  id: ID_Output;
  name: String;
}

export interface DeckPromise extends Promise<Deck>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  hanzis: <T = FragmentableArray<Hanzi>>(args?: {
    where?: HanziWhereInput;
    orderBy?: HanziOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creator: <T = UserPromise>() => T;
}

export interface DeckSubscription
  extends Promise<AsyncIterator<Deck>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  hanzis: <T = Promise<AsyncIterator<HanziSubscription>>>(args?: {
    where?: HanziWhereInput;
    orderBy?: HanziOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creator: <T = UserSubscription>() => T;
}

export interface Hanzi {
  id: ID_Output;
  traditional: String;
  simplified: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions: String;
  definitionsDiacritic?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface HanziPromise extends Promise<Hanzi>, Fragmentable {
  id: () => Promise<ID_Output>;
  traditional: () => Promise<String>;
  simplified: () => Promise<String>;
  referencedTraditional: () => Promise<String>;
  referencedSimplified: () => Promise<String>;
  pinyinNumeric: () => Promise<String>;
  pinyinDiacritic: () => Promise<String>;
  definitions: () => Promise<String>;
  definitionsDiacritic: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  usersBookmarked: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decksIncluded: <T = FragmentableArray<Deck>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HanziSubscription
  extends Promise<AsyncIterator<Hanzi>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  traditional: () => Promise<AsyncIterator<String>>;
  simplified: () => Promise<AsyncIterator<String>>;
  referencedTraditional: () => Promise<AsyncIterator<String>>;
  referencedSimplified: () => Promise<AsyncIterator<String>>;
  pinyinNumeric: () => Promise<AsyncIterator<String>>;
  pinyinDiacritic: () => Promise<AsyncIterator<String>>;
  definitions: () => Promise<AsyncIterator<String>>;
  definitionsDiacritic: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  usersBookmarked: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decksIncluded: <T = Promise<AsyncIterator<DeckSubscription>>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  bookmarkedHanzis: <T = FragmentableArray<Hanzi>>(args?: {
    where?: HanziWhereInput;
    orderBy?: HanziOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decks: <T = FragmentableArray<Deck>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  bookmarkedHanzis: <T = Promise<AsyncIterator<HanziSubscription>>>(args?: {
    where?: HanziWhereInput;
    orderBy?: HanziOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decks: <T = Promise<AsyncIterator<DeckSubscription>>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DeckConnection {
  pageInfo: PageInfo;
  edges: DeckEdge[];
}

export interface DeckConnectionPromise
  extends Promise<DeckConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeckEdge>>() => T;
  aggregate: <T = AggregateDeckPromise>() => T;
}

export interface DeckConnectionSubscription
  extends Promise<AsyncIterator<DeckConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeckEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeckSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DeckEdge {
  node: Deck;
  cursor: String;
}

export interface DeckEdgePromise extends Promise<DeckEdge>, Fragmentable {
  node: <T = DeckPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeckEdgeSubscription
  extends Promise<AsyncIterator<DeckEdge>>,
    Fragmentable {
  node: <T = DeckSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeck {
  count: Int;
}

export interface AggregateDeckPromise
  extends Promise<AggregateDeck>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeckSubscription
  extends Promise<AsyncIterator<AggregateDeck>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HanziConnection {
  pageInfo: PageInfo;
  edges: HanziEdge[];
}

export interface HanziConnectionPromise
  extends Promise<HanziConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HanziEdge>>() => T;
  aggregate: <T = AggregateHanziPromise>() => T;
}

export interface HanziConnectionSubscription
  extends Promise<AsyncIterator<HanziConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HanziEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHanziSubscription>() => T;
}

export interface HanziEdge {
  node: Hanzi;
  cursor: String;
}

export interface HanziEdgePromise extends Promise<HanziEdge>, Fragmentable {
  node: <T = HanziPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HanziEdgeSubscription
  extends Promise<AsyncIterator<HanziEdge>>,
    Fragmentable {
  node: <T = HanziSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHanzi {
  count: Int;
}

export interface AggregateHanziPromise
  extends Promise<AggregateHanzi>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHanziSubscription
  extends Promise<AsyncIterator<AggregateHanzi>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DeckSubscriptionPayload {
  mutation: MutationType;
  node: Deck;
  updatedFields: String[];
  previousValues: DeckPreviousValues;
}

export interface DeckSubscriptionPayloadPromise
  extends Promise<DeckSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeckPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeckPreviousValuesPromise>() => T;
}

export interface DeckSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeckSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeckSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeckPreviousValuesSubscription>() => T;
}

export interface DeckPreviousValues {
  id: ID_Output;
  name: String;
}

export interface DeckPreviousValuesPromise
  extends Promise<DeckPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DeckPreviousValuesSubscription
  extends Promise<AsyncIterator<DeckPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface HanziSubscriptionPayload {
  mutation: MutationType;
  node: Hanzi;
  updatedFields: String[];
  previousValues: HanziPreviousValues;
}

export interface HanziSubscriptionPayloadPromise
  extends Promise<HanziSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HanziPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HanziPreviousValuesPromise>() => T;
}

export interface HanziSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HanziSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HanziSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HanziPreviousValuesSubscription>() => T;
}

export interface HanziPreviousValues {
  id: ID_Output;
  traditional: String;
  simplified: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions: String;
  definitionsDiacritic?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface HanziPreviousValuesPromise
  extends Promise<HanziPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  traditional: () => Promise<String>;
  simplified: () => Promise<String>;
  referencedTraditional: () => Promise<String>;
  referencedSimplified: () => Promise<String>;
  pinyinNumeric: () => Promise<String>;
  pinyinDiacritic: () => Promise<String>;
  definitions: () => Promise<String>;
  definitionsDiacritic: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface HanziPreviousValuesSubscription
  extends Promise<AsyncIterator<HanziPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  traditional: () => Promise<AsyncIterator<String>>;
  simplified: () => Promise<AsyncIterator<String>>;
  referencedTraditional: () => Promise<AsyncIterator<String>>;
  referencedSimplified: () => Promise<AsyncIterator<String>>;
  pinyinNumeric: () => Promise<AsyncIterator<String>>;
  pinyinDiacritic: () => Promise<AsyncIterator<String>>;
  definitions: () => Promise<AsyncIterator<String>>;
  definitionsDiacritic: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Deck",
    embedded: false
  },
  {
    name: "Hanzi",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/default/default`
});
export const prisma = new Prisma();
