// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  deck: (where?: DeckWhereInput) => Promise<boolean>;
  flashcard: (where?: FlashcardWhereInput) => Promise<boolean>;
  hanzi: (where?: HanziWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  deck: (where: DeckWhereUniqueInput) => DeckNullablePromise;
  decks: (args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deck>;
  decksConnection: (args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DeckConnectionPromise;
  flashcard: (where: FlashcardWhereUniqueInput) => FlashcardNullablePromise;
  flashcards: (args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Flashcard>;
  flashcardsConnection: (args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FlashcardConnectionPromise;
  hanzi: (where: HanziWhereUniqueInput) => HanziNullablePromise;
  hanzis: (args?: {
    where?: HanziWhereInput;
    orderBy?: HanziOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hanzi>;
  hanzisConnection: (args?: {
    where?: HanziWhereInput;
    orderBy?: HanziOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HanziConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDeck: (data: DeckCreateInput) => DeckPromise;
  updateDeck: (args: {
    data: DeckUpdateInput;
    where: DeckWhereUniqueInput;
  }) => DeckPromise;
  updateManyDecks: (args: {
    data: DeckUpdateManyMutationInput;
    where?: DeckWhereInput;
  }) => BatchPayloadPromise;
  upsertDeck: (args: {
    where: DeckWhereUniqueInput;
    create: DeckCreateInput;
    update: DeckUpdateInput;
  }) => DeckPromise;
  deleteDeck: (where: DeckWhereUniqueInput) => DeckPromise;
  deleteManyDecks: (where?: DeckWhereInput) => BatchPayloadPromise;
  createFlashcard: (data: FlashcardCreateInput) => FlashcardPromise;
  updateFlashcard: (args: {
    data: FlashcardUpdateInput;
    where: FlashcardWhereUniqueInput;
  }) => FlashcardPromise;
  updateManyFlashcards: (args: {
    data: FlashcardUpdateManyMutationInput;
    where?: FlashcardWhereInput;
  }) => BatchPayloadPromise;
  upsertFlashcard: (args: {
    where: FlashcardWhereUniqueInput;
    create: FlashcardCreateInput;
    update: FlashcardUpdateInput;
  }) => FlashcardPromise;
  deleteFlashcard: (where: FlashcardWhereUniqueInput) => FlashcardPromise;
  deleteManyFlashcards: (where?: FlashcardWhereInput) => BatchPayloadPromise;
  createHanzi: (data: HanziCreateInput) => HanziPromise;
  updateHanzi: (args: {
    data: HanziUpdateInput;
    where: HanziWhereUniqueInput;
  }) => HanziPromise;
  updateManyHanzis: (args: {
    data: HanziUpdateManyMutationInput;
    where?: HanziWhereInput;
  }) => BatchPayloadPromise;
  upsertHanzi: (args: {
    where: HanziWhereUniqueInput;
    create: HanziCreateInput;
    update: HanziUpdateInput;
  }) => HanziPromise;
  deleteHanzi: (where: HanziWhereUniqueInput) => HanziPromise;
  deleteManyHanzis: (where?: HanziWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  deck: (
    where?: DeckSubscriptionWhereInput
  ) => DeckSubscriptionPayloadSubscription;
  flashcard: (
    where?: FlashcardSubscriptionWhereInput
  ) => FlashcardSubscriptionPayloadSubscription;
  hanzi: (
    where?: HanziSubscriptionWhereInput
  ) => HanziSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FlashcardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "comfortLevel_ASC"
  | "comfortLevel_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type DeckOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type HanziOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "traditional_ASC"
  | "traditional_DESC"
  | "simplified_ASC"
  | "simplified_DESC"
  | "referencedTraditional_ASC"
  | "referencedTraditional_DESC"
  | "referencedSimplified_ASC"
  | "referencedSimplified_DESC"
  | "pinyinNumeric_ASC"
  | "pinyinNumeric_DESC"
  | "pinyinDiacritic_ASC"
  | "pinyinDiacritic_DESC"
  | "definitions_ASC"
  | "definitions_DESC"
  | "definitionsDiacritic_ASC"
  | "definitionsDiacritic_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DeckWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FlashcardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  hanzi?: Maybe<HanziWhereInput>;
  user?: Maybe<UserWhereInput>;
  comfortLevel?: Maybe<Int>;
  comfortLevel_not?: Maybe<Int>;
  comfortLevel_in?: Maybe<Int[] | Int>;
  comfortLevel_not_in?: Maybe<Int[] | Int>;
  comfortLevel_lt?: Maybe<Int>;
  comfortLevel_lte?: Maybe<Int>;
  comfortLevel_gt?: Maybe<Int>;
  comfortLevel_gte?: Maybe<Int>;
  decks_every?: Maybe<DeckWhereInput>;
  decks_some?: Maybe<DeckWhereInput>;
  decks_none?: Maybe<DeckWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FlashcardWhereInput[] | FlashcardWhereInput>;
  OR?: Maybe<FlashcardWhereInput[] | FlashcardWhereInput>;
  NOT?: Maybe<FlashcardWhereInput[] | FlashcardWhereInput>;
}

export interface HanziWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  traditional?: Maybe<String>;
  traditional_not?: Maybe<String>;
  traditional_in?: Maybe<String[] | String>;
  traditional_not_in?: Maybe<String[] | String>;
  traditional_lt?: Maybe<String>;
  traditional_lte?: Maybe<String>;
  traditional_gt?: Maybe<String>;
  traditional_gte?: Maybe<String>;
  traditional_contains?: Maybe<String>;
  traditional_not_contains?: Maybe<String>;
  traditional_starts_with?: Maybe<String>;
  traditional_not_starts_with?: Maybe<String>;
  traditional_ends_with?: Maybe<String>;
  traditional_not_ends_with?: Maybe<String>;
  simplified?: Maybe<String>;
  simplified_not?: Maybe<String>;
  simplified_in?: Maybe<String[] | String>;
  simplified_not_in?: Maybe<String[] | String>;
  simplified_lt?: Maybe<String>;
  simplified_lte?: Maybe<String>;
  simplified_gt?: Maybe<String>;
  simplified_gte?: Maybe<String>;
  simplified_contains?: Maybe<String>;
  simplified_not_contains?: Maybe<String>;
  simplified_starts_with?: Maybe<String>;
  simplified_not_starts_with?: Maybe<String>;
  simplified_ends_with?: Maybe<String>;
  simplified_not_ends_with?: Maybe<String>;
  referencedTraditional?: Maybe<String>;
  referencedTraditional_not?: Maybe<String>;
  referencedTraditional_in?: Maybe<String[] | String>;
  referencedTraditional_not_in?: Maybe<String[] | String>;
  referencedTraditional_lt?: Maybe<String>;
  referencedTraditional_lte?: Maybe<String>;
  referencedTraditional_gt?: Maybe<String>;
  referencedTraditional_gte?: Maybe<String>;
  referencedTraditional_contains?: Maybe<String>;
  referencedTraditional_not_contains?: Maybe<String>;
  referencedTraditional_starts_with?: Maybe<String>;
  referencedTraditional_not_starts_with?: Maybe<String>;
  referencedTraditional_ends_with?: Maybe<String>;
  referencedTraditional_not_ends_with?: Maybe<String>;
  referencedSimplified?: Maybe<String>;
  referencedSimplified_not?: Maybe<String>;
  referencedSimplified_in?: Maybe<String[] | String>;
  referencedSimplified_not_in?: Maybe<String[] | String>;
  referencedSimplified_lt?: Maybe<String>;
  referencedSimplified_lte?: Maybe<String>;
  referencedSimplified_gt?: Maybe<String>;
  referencedSimplified_gte?: Maybe<String>;
  referencedSimplified_contains?: Maybe<String>;
  referencedSimplified_not_contains?: Maybe<String>;
  referencedSimplified_starts_with?: Maybe<String>;
  referencedSimplified_not_starts_with?: Maybe<String>;
  referencedSimplified_ends_with?: Maybe<String>;
  referencedSimplified_not_ends_with?: Maybe<String>;
  pinyinNumeric?: Maybe<String>;
  pinyinNumeric_not?: Maybe<String>;
  pinyinNumeric_in?: Maybe<String[] | String>;
  pinyinNumeric_not_in?: Maybe<String[] | String>;
  pinyinNumeric_lt?: Maybe<String>;
  pinyinNumeric_lte?: Maybe<String>;
  pinyinNumeric_gt?: Maybe<String>;
  pinyinNumeric_gte?: Maybe<String>;
  pinyinNumeric_contains?: Maybe<String>;
  pinyinNumeric_not_contains?: Maybe<String>;
  pinyinNumeric_starts_with?: Maybe<String>;
  pinyinNumeric_not_starts_with?: Maybe<String>;
  pinyinNumeric_ends_with?: Maybe<String>;
  pinyinNumeric_not_ends_with?: Maybe<String>;
  pinyinDiacritic?: Maybe<String>;
  pinyinDiacritic_not?: Maybe<String>;
  pinyinDiacritic_in?: Maybe<String[] | String>;
  pinyinDiacritic_not_in?: Maybe<String[] | String>;
  pinyinDiacritic_lt?: Maybe<String>;
  pinyinDiacritic_lte?: Maybe<String>;
  pinyinDiacritic_gt?: Maybe<String>;
  pinyinDiacritic_gte?: Maybe<String>;
  pinyinDiacritic_contains?: Maybe<String>;
  pinyinDiacritic_not_contains?: Maybe<String>;
  pinyinDiacritic_starts_with?: Maybe<String>;
  pinyinDiacritic_not_starts_with?: Maybe<String>;
  pinyinDiacritic_ends_with?: Maybe<String>;
  pinyinDiacritic_not_ends_with?: Maybe<String>;
  definitions?: Maybe<String>;
  definitions_not?: Maybe<String>;
  definitions_in?: Maybe<String[] | String>;
  definitions_not_in?: Maybe<String[] | String>;
  definitions_lt?: Maybe<String>;
  definitions_lte?: Maybe<String>;
  definitions_gt?: Maybe<String>;
  definitions_gte?: Maybe<String>;
  definitions_contains?: Maybe<String>;
  definitions_not_contains?: Maybe<String>;
  definitions_starts_with?: Maybe<String>;
  definitions_not_starts_with?: Maybe<String>;
  definitions_ends_with?: Maybe<String>;
  definitions_not_ends_with?: Maybe<String>;
  definitionsDiacritic?: Maybe<String>;
  definitionsDiacritic_not?: Maybe<String>;
  definitionsDiacritic_in?: Maybe<String[] | String>;
  definitionsDiacritic_not_in?: Maybe<String[] | String>;
  definitionsDiacritic_lt?: Maybe<String>;
  definitionsDiacritic_lte?: Maybe<String>;
  definitionsDiacritic_gt?: Maybe<String>;
  definitionsDiacritic_gte?: Maybe<String>;
  definitionsDiacritic_contains?: Maybe<String>;
  definitionsDiacritic_not_contains?: Maybe<String>;
  definitionsDiacritic_starts_with?: Maybe<String>;
  definitionsDiacritic_not_starts_with?: Maybe<String>;
  definitionsDiacritic_ends_with?: Maybe<String>;
  definitionsDiacritic_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  flashcards_every?: Maybe<FlashcardWhereInput>;
  flashcards_some?: Maybe<FlashcardWhereInput>;
  flashcards_none?: Maybe<FlashcardWhereInput>;
  AND?: Maybe<HanziWhereInput[] | HanziWhereInput>;
  OR?: Maybe<HanziWhereInput[] | HanziWhereInput>;
  NOT?: Maybe<HanziWhereInput[] | HanziWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  flashcards_every?: Maybe<FlashcardWhereInput>;
  flashcards_some?: Maybe<FlashcardWhereInput>;
  flashcards_none?: Maybe<FlashcardWhereInput>;
  decks_every?: Maybe<DeckWhereInput>;
  decks_some?: Maybe<DeckWhereInput>;
  decks_none?: Maybe<DeckWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface DeckWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  flashcards_every?: Maybe<FlashcardWhereInput>;
  flashcards_some?: Maybe<FlashcardWhereInput>;
  flashcards_none?: Maybe<FlashcardWhereInput>;
  creator?: Maybe<UserWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DeckWhereInput[] | DeckWhereInput>;
  OR?: Maybe<DeckWhereInput[] | DeckWhereInput>;
  NOT?: Maybe<DeckWhereInput[] | DeckWhereInput>;
}

export type FlashcardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type HanziWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface DeckCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  flashcards?: Maybe<FlashcardCreateManyWithoutDecksInput>;
  creator: UserCreateOneWithoutDecksInput;
}

export interface FlashcardCreateManyWithoutDecksInput {
  create?: Maybe<
    FlashcardCreateWithoutDecksInput[] | FlashcardCreateWithoutDecksInput
  >;
  connect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
}

export interface FlashcardCreateWithoutDecksInput {
  id?: Maybe<ID_Input>;
  hanzi: HanziCreateOneWithoutFlashcardsInput;
  user: UserCreateOneWithoutFlashcardsInput;
  comfortLevel: Int;
}

export interface HanziCreateOneWithoutFlashcardsInput {
  create?: Maybe<HanziCreateWithoutFlashcardsInput>;
  connect?: Maybe<HanziWhereUniqueInput>;
}

export interface HanziCreateWithoutFlashcardsInput {
  id?: Maybe<ID_Input>;
  traditional: String;
  simplified: String;
  referencedTraditional?: Maybe<String>;
  referencedSimplified?: Maybe<String>;
  pinyinNumeric?: Maybe<String>;
  pinyinDiacritic?: Maybe<String>;
  definitions: String;
  definitionsDiacritic?: Maybe<String>;
}

export interface UserCreateOneWithoutFlashcardsInput {
  create?: Maybe<UserCreateWithoutFlashcardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFlashcardsInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  decks?: Maybe<DeckCreateManyWithoutCreatorInput>;
}

export interface DeckCreateManyWithoutCreatorInput {
  create?: Maybe<
    DeckCreateWithoutCreatorInput[] | DeckCreateWithoutCreatorInput
  >;
  connect?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
}

export interface DeckCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  flashcards?: Maybe<FlashcardCreateManyWithoutDecksInput>;
}

export interface UserCreateOneWithoutDecksInput {
  create?: Maybe<UserCreateWithoutDecksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutDecksInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  flashcards?: Maybe<FlashcardCreateManyWithoutUserInput>;
}

export interface FlashcardCreateManyWithoutUserInput {
  create?: Maybe<
    FlashcardCreateWithoutUserInput[] | FlashcardCreateWithoutUserInput
  >;
  connect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
}

export interface FlashcardCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  hanzi: HanziCreateOneWithoutFlashcardsInput;
  comfortLevel: Int;
  decks?: Maybe<DeckCreateManyWithoutFlashcardsInput>;
}

export interface DeckCreateManyWithoutFlashcardsInput {
  create?: Maybe<
    DeckCreateWithoutFlashcardsInput[] | DeckCreateWithoutFlashcardsInput
  >;
  connect?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
}

export interface DeckCreateWithoutFlashcardsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  creator: UserCreateOneWithoutDecksInput;
}

export interface DeckUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  flashcards?: Maybe<FlashcardUpdateManyWithoutDecksInput>;
  creator?: Maybe<UserUpdateOneRequiredWithoutDecksInput>;
}

export interface FlashcardUpdateManyWithoutDecksInput {
  create?: Maybe<
    FlashcardCreateWithoutDecksInput[] | FlashcardCreateWithoutDecksInput
  >;
  delete?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  connect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  set?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  disconnect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  update?: Maybe<
    | FlashcardUpdateWithWhereUniqueWithoutDecksInput[]
    | FlashcardUpdateWithWhereUniqueWithoutDecksInput
  >;
  upsert?: Maybe<
    | FlashcardUpsertWithWhereUniqueWithoutDecksInput[]
    | FlashcardUpsertWithWhereUniqueWithoutDecksInput
  >;
  deleteMany?: Maybe<FlashcardScalarWhereInput[] | FlashcardScalarWhereInput>;
  updateMany?: Maybe<
    | FlashcardUpdateManyWithWhereNestedInput[]
    | FlashcardUpdateManyWithWhereNestedInput
  >;
}

export interface FlashcardUpdateWithWhereUniqueWithoutDecksInput {
  where: FlashcardWhereUniqueInput;
  data: FlashcardUpdateWithoutDecksDataInput;
}

export interface FlashcardUpdateWithoutDecksDataInput {
  hanzi?: Maybe<HanziUpdateOneRequiredWithoutFlashcardsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutFlashcardsInput>;
  comfortLevel?: Maybe<Int>;
}

export interface HanziUpdateOneRequiredWithoutFlashcardsInput {
  create?: Maybe<HanziCreateWithoutFlashcardsInput>;
  update?: Maybe<HanziUpdateWithoutFlashcardsDataInput>;
  upsert?: Maybe<HanziUpsertWithoutFlashcardsInput>;
  connect?: Maybe<HanziWhereUniqueInput>;
}

export interface HanziUpdateWithoutFlashcardsDataInput {
  traditional?: Maybe<String>;
  simplified?: Maybe<String>;
  referencedTraditional?: Maybe<String>;
  referencedSimplified?: Maybe<String>;
  pinyinNumeric?: Maybe<String>;
  pinyinDiacritic?: Maybe<String>;
  definitions?: Maybe<String>;
  definitionsDiacritic?: Maybe<String>;
}

export interface HanziUpsertWithoutFlashcardsInput {
  update: HanziUpdateWithoutFlashcardsDataInput;
  create: HanziCreateWithoutFlashcardsInput;
}

export interface UserUpdateOneRequiredWithoutFlashcardsInput {
  create?: Maybe<UserCreateWithoutFlashcardsInput>;
  update?: Maybe<UserUpdateWithoutFlashcardsDataInput>;
  upsert?: Maybe<UserUpsertWithoutFlashcardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFlashcardsDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  decks?: Maybe<DeckUpdateManyWithoutCreatorInput>;
}

export interface DeckUpdateManyWithoutCreatorInput {
  create?: Maybe<
    DeckCreateWithoutCreatorInput[] | DeckCreateWithoutCreatorInput
  >;
  delete?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
  connect?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
  set?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
  disconnect?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
  update?: Maybe<
    | DeckUpdateWithWhereUniqueWithoutCreatorInput[]
    | DeckUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | DeckUpsertWithWhereUniqueWithoutCreatorInput[]
    | DeckUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<DeckScalarWhereInput[] | DeckScalarWhereInput>;
  updateMany?: Maybe<
    DeckUpdateManyWithWhereNestedInput[] | DeckUpdateManyWithWhereNestedInput
  >;
}

export interface DeckUpdateWithWhereUniqueWithoutCreatorInput {
  where: DeckWhereUniqueInput;
  data: DeckUpdateWithoutCreatorDataInput;
}

export interface DeckUpdateWithoutCreatorDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  flashcards?: Maybe<FlashcardUpdateManyWithoutDecksInput>;
}

export interface DeckUpsertWithWhereUniqueWithoutCreatorInput {
  where: DeckWhereUniqueInput;
  update: DeckUpdateWithoutCreatorDataInput;
  create: DeckCreateWithoutCreatorInput;
}

export interface DeckScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DeckScalarWhereInput[] | DeckScalarWhereInput>;
  OR?: Maybe<DeckScalarWhereInput[] | DeckScalarWhereInput>;
  NOT?: Maybe<DeckScalarWhereInput[] | DeckScalarWhereInput>;
}

export interface DeckUpdateManyWithWhereNestedInput {
  where: DeckScalarWhereInput;
  data: DeckUpdateManyDataInput;
}

export interface DeckUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpsertWithoutFlashcardsInput {
  update: UserUpdateWithoutFlashcardsDataInput;
  create: UserCreateWithoutFlashcardsInput;
}

export interface FlashcardUpsertWithWhereUniqueWithoutDecksInput {
  where: FlashcardWhereUniqueInput;
  update: FlashcardUpdateWithoutDecksDataInput;
  create: FlashcardCreateWithoutDecksInput;
}

export interface FlashcardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  comfortLevel?: Maybe<Int>;
  comfortLevel_not?: Maybe<Int>;
  comfortLevel_in?: Maybe<Int[] | Int>;
  comfortLevel_not_in?: Maybe<Int[] | Int>;
  comfortLevel_lt?: Maybe<Int>;
  comfortLevel_lte?: Maybe<Int>;
  comfortLevel_gt?: Maybe<Int>;
  comfortLevel_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FlashcardScalarWhereInput[] | FlashcardScalarWhereInput>;
  OR?: Maybe<FlashcardScalarWhereInput[] | FlashcardScalarWhereInput>;
  NOT?: Maybe<FlashcardScalarWhereInput[] | FlashcardScalarWhereInput>;
}

export interface FlashcardUpdateManyWithWhereNestedInput {
  where: FlashcardScalarWhereInput;
  data: FlashcardUpdateManyDataInput;
}

export interface FlashcardUpdateManyDataInput {
  comfortLevel?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutDecksInput {
  create?: Maybe<UserCreateWithoutDecksInput>;
  update?: Maybe<UserUpdateWithoutDecksDataInput>;
  upsert?: Maybe<UserUpsertWithoutDecksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutDecksDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  flashcards?: Maybe<FlashcardUpdateManyWithoutUserInput>;
}

export interface FlashcardUpdateManyWithoutUserInput {
  create?: Maybe<
    FlashcardCreateWithoutUserInput[] | FlashcardCreateWithoutUserInput
  >;
  delete?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  connect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  set?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  disconnect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  update?: Maybe<
    | FlashcardUpdateWithWhereUniqueWithoutUserInput[]
    | FlashcardUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | FlashcardUpsertWithWhereUniqueWithoutUserInput[]
    | FlashcardUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<FlashcardScalarWhereInput[] | FlashcardScalarWhereInput>;
  updateMany?: Maybe<
    | FlashcardUpdateManyWithWhereNestedInput[]
    | FlashcardUpdateManyWithWhereNestedInput
  >;
}

export interface FlashcardUpdateWithWhereUniqueWithoutUserInput {
  where: FlashcardWhereUniqueInput;
  data: FlashcardUpdateWithoutUserDataInput;
}

export interface FlashcardUpdateWithoutUserDataInput {
  hanzi?: Maybe<HanziUpdateOneRequiredWithoutFlashcardsInput>;
  comfortLevel?: Maybe<Int>;
  decks?: Maybe<DeckUpdateManyWithoutFlashcardsInput>;
}

export interface DeckUpdateManyWithoutFlashcardsInput {
  create?: Maybe<
    DeckCreateWithoutFlashcardsInput[] | DeckCreateWithoutFlashcardsInput
  >;
  delete?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
  connect?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
  set?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
  disconnect?: Maybe<DeckWhereUniqueInput[] | DeckWhereUniqueInput>;
  update?: Maybe<
    | DeckUpdateWithWhereUniqueWithoutFlashcardsInput[]
    | DeckUpdateWithWhereUniqueWithoutFlashcardsInput
  >;
  upsert?: Maybe<
    | DeckUpsertWithWhereUniqueWithoutFlashcardsInput[]
    | DeckUpsertWithWhereUniqueWithoutFlashcardsInput
  >;
  deleteMany?: Maybe<DeckScalarWhereInput[] | DeckScalarWhereInput>;
  updateMany?: Maybe<
    DeckUpdateManyWithWhereNestedInput[] | DeckUpdateManyWithWhereNestedInput
  >;
}

export interface DeckUpdateWithWhereUniqueWithoutFlashcardsInput {
  where: DeckWhereUniqueInput;
  data: DeckUpdateWithoutFlashcardsDataInput;
}

export interface DeckUpdateWithoutFlashcardsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  creator?: Maybe<UserUpdateOneRequiredWithoutDecksInput>;
}

export interface DeckUpsertWithWhereUniqueWithoutFlashcardsInput {
  where: DeckWhereUniqueInput;
  update: DeckUpdateWithoutFlashcardsDataInput;
  create: DeckCreateWithoutFlashcardsInput;
}

export interface FlashcardUpsertWithWhereUniqueWithoutUserInput {
  where: FlashcardWhereUniqueInput;
  update: FlashcardUpdateWithoutUserDataInput;
  create: FlashcardCreateWithoutUserInput;
}

export interface UserUpsertWithoutDecksInput {
  update: UserUpdateWithoutDecksDataInput;
  create: UserCreateWithoutDecksInput;
}

export interface DeckUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface FlashcardCreateInput {
  id?: Maybe<ID_Input>;
  hanzi: HanziCreateOneWithoutFlashcardsInput;
  user: UserCreateOneWithoutFlashcardsInput;
  comfortLevel: Int;
  decks?: Maybe<DeckCreateManyWithoutFlashcardsInput>;
}

export interface FlashcardUpdateInput {
  hanzi?: Maybe<HanziUpdateOneRequiredWithoutFlashcardsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutFlashcardsInput>;
  comfortLevel?: Maybe<Int>;
  decks?: Maybe<DeckUpdateManyWithoutFlashcardsInput>;
}

export interface FlashcardUpdateManyMutationInput {
  comfortLevel?: Maybe<Int>;
}

export interface HanziCreateInput {
  id?: Maybe<ID_Input>;
  traditional: String;
  simplified: String;
  referencedTraditional?: Maybe<String>;
  referencedSimplified?: Maybe<String>;
  pinyinNumeric?: Maybe<String>;
  pinyinDiacritic?: Maybe<String>;
  definitions: String;
  definitionsDiacritic?: Maybe<String>;
  flashcards?: Maybe<FlashcardCreateManyWithoutHanziInput>;
}

export interface FlashcardCreateManyWithoutHanziInput {
  create?: Maybe<
    FlashcardCreateWithoutHanziInput[] | FlashcardCreateWithoutHanziInput
  >;
  connect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
}

export interface FlashcardCreateWithoutHanziInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutFlashcardsInput;
  comfortLevel: Int;
  decks?: Maybe<DeckCreateManyWithoutFlashcardsInput>;
}

export interface HanziUpdateInput {
  traditional?: Maybe<String>;
  simplified?: Maybe<String>;
  referencedTraditional?: Maybe<String>;
  referencedSimplified?: Maybe<String>;
  pinyinNumeric?: Maybe<String>;
  pinyinDiacritic?: Maybe<String>;
  definitions?: Maybe<String>;
  definitionsDiacritic?: Maybe<String>;
  flashcards?: Maybe<FlashcardUpdateManyWithoutHanziInput>;
}

export interface FlashcardUpdateManyWithoutHanziInput {
  create?: Maybe<
    FlashcardCreateWithoutHanziInput[] | FlashcardCreateWithoutHanziInput
  >;
  delete?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  connect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  set?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  disconnect?: Maybe<FlashcardWhereUniqueInput[] | FlashcardWhereUniqueInput>;
  update?: Maybe<
    | FlashcardUpdateWithWhereUniqueWithoutHanziInput[]
    | FlashcardUpdateWithWhereUniqueWithoutHanziInput
  >;
  upsert?: Maybe<
    | FlashcardUpsertWithWhereUniqueWithoutHanziInput[]
    | FlashcardUpsertWithWhereUniqueWithoutHanziInput
  >;
  deleteMany?: Maybe<FlashcardScalarWhereInput[] | FlashcardScalarWhereInput>;
  updateMany?: Maybe<
    | FlashcardUpdateManyWithWhereNestedInput[]
    | FlashcardUpdateManyWithWhereNestedInput
  >;
}

export interface FlashcardUpdateWithWhereUniqueWithoutHanziInput {
  where: FlashcardWhereUniqueInput;
  data: FlashcardUpdateWithoutHanziDataInput;
}

export interface FlashcardUpdateWithoutHanziDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutFlashcardsInput>;
  comfortLevel?: Maybe<Int>;
  decks?: Maybe<DeckUpdateManyWithoutFlashcardsInput>;
}

export interface FlashcardUpsertWithWhereUniqueWithoutHanziInput {
  where: FlashcardWhereUniqueInput;
  update: FlashcardUpdateWithoutHanziDataInput;
  create: FlashcardCreateWithoutHanziInput;
}

export interface HanziUpdateManyMutationInput {
  traditional?: Maybe<String>;
  simplified?: Maybe<String>;
  referencedTraditional?: Maybe<String>;
  referencedSimplified?: Maybe<String>;
  pinyinNumeric?: Maybe<String>;
  pinyinDiacritic?: Maybe<String>;
  definitions?: Maybe<String>;
  definitionsDiacritic?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  flashcards?: Maybe<FlashcardCreateManyWithoutUserInput>;
  decks?: Maybe<DeckCreateManyWithoutCreatorInput>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  flashcards?: Maybe<FlashcardUpdateManyWithoutUserInput>;
  decks?: Maybe<DeckUpdateManyWithoutCreatorInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface DeckSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DeckWhereInput>;
  AND?: Maybe<DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput>;
  OR?: Maybe<DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput>;
  NOT?: Maybe<DeckSubscriptionWhereInput[] | DeckSubscriptionWhereInput>;
}

export interface FlashcardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FlashcardWhereInput>;
  AND?: Maybe<
    FlashcardSubscriptionWhereInput[] | FlashcardSubscriptionWhereInput
  >;
  OR?: Maybe<
    FlashcardSubscriptionWhereInput[] | FlashcardSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FlashcardSubscriptionWhereInput[] | FlashcardSubscriptionWhereInput
  >;
}

export interface HanziSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HanziWhereInput>;
  AND?: Maybe<HanziSubscriptionWhereInput[] | HanziSubscriptionWhereInput>;
  OR?: Maybe<HanziSubscriptionWhereInput[] | HanziSubscriptionWhereInput>;
  NOT?: Maybe<HanziSubscriptionWhereInput[] | HanziSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Deck {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface DeckPromise extends Promise<Deck>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  flashcards: <T = FragmentableArray<Flashcard>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creator: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DeckSubscription
  extends Promise<AsyncIterator<Deck>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  flashcards: <T = Promise<AsyncIterator<FlashcardSubscription>>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creator: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeckNullablePromise
  extends Promise<Deck | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  flashcards: <T = FragmentableArray<Flashcard>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creator: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Flashcard {
  id: ID_Output;
  comfortLevel: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface FlashcardPromise extends Promise<Flashcard>, Fragmentable {
  id: () => Promise<ID_Output>;
  hanzi: <T = HanziPromise>() => T;
  user: <T = UserPromise>() => T;
  comfortLevel: () => Promise<Int>;
  decks: <T = FragmentableArray<Deck>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FlashcardSubscription
  extends Promise<AsyncIterator<Flashcard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hanzi: <T = HanziSubscription>() => T;
  user: <T = UserSubscription>() => T;
  comfortLevel: () => Promise<AsyncIterator<Int>>;
  decks: <T = Promise<AsyncIterator<DeckSubscription>>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FlashcardNullablePromise
  extends Promise<Flashcard | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hanzi: <T = HanziPromise>() => T;
  user: <T = UserPromise>() => T;
  comfortLevel: () => Promise<Int>;
  decks: <T = FragmentableArray<Deck>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Hanzi {
  id: ID_Output;
  traditional: String;
  simplified: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions: String;
  definitionsDiacritic?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface HanziPromise extends Promise<Hanzi>, Fragmentable {
  id: () => Promise<ID_Output>;
  traditional: () => Promise<String>;
  simplified: () => Promise<String>;
  referencedTraditional: () => Promise<String>;
  referencedSimplified: () => Promise<String>;
  pinyinNumeric: () => Promise<String>;
  pinyinDiacritic: () => Promise<String>;
  definitions: () => Promise<String>;
  definitionsDiacritic: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  flashcards: <T = FragmentableArray<Flashcard>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HanziSubscription
  extends Promise<AsyncIterator<Hanzi>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  traditional: () => Promise<AsyncIterator<String>>;
  simplified: () => Promise<AsyncIterator<String>>;
  referencedTraditional: () => Promise<AsyncIterator<String>>;
  referencedSimplified: () => Promise<AsyncIterator<String>>;
  pinyinNumeric: () => Promise<AsyncIterator<String>>;
  pinyinDiacritic: () => Promise<AsyncIterator<String>>;
  definitions: () => Promise<AsyncIterator<String>>;
  definitionsDiacritic: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  flashcards: <T = Promise<AsyncIterator<FlashcardSubscription>>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HanziNullablePromise
  extends Promise<Hanzi | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  traditional: () => Promise<String>;
  simplified: () => Promise<String>;
  referencedTraditional: () => Promise<String>;
  referencedSimplified: () => Promise<String>;
  pinyinNumeric: () => Promise<String>;
  pinyinDiacritic: () => Promise<String>;
  definitions: () => Promise<String>;
  definitionsDiacritic: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  flashcards: <T = FragmentableArray<Flashcard>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  flashcards: <T = FragmentableArray<Flashcard>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decks: <T = FragmentableArray<Deck>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  flashcards: <T = Promise<AsyncIterator<FlashcardSubscription>>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decks: <T = Promise<AsyncIterator<DeckSubscription>>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  flashcards: <T = FragmentableArray<Flashcard>>(args?: {
    where?: FlashcardWhereInput;
    orderBy?: FlashcardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decks: <T = FragmentableArray<Deck>>(args?: {
    where?: DeckWhereInput;
    orderBy?: DeckOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DeckConnection {
  pageInfo: PageInfo;
  edges: DeckEdge[];
}

export interface DeckConnectionPromise
  extends Promise<DeckConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeckEdge>>() => T;
  aggregate: <T = AggregateDeckPromise>() => T;
}

export interface DeckConnectionSubscription
  extends Promise<AsyncIterator<DeckConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeckEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeckSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DeckEdge {
  node: Deck;
  cursor: String;
}

export interface DeckEdgePromise extends Promise<DeckEdge>, Fragmentable {
  node: <T = DeckPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeckEdgeSubscription
  extends Promise<AsyncIterator<DeckEdge>>,
    Fragmentable {
  node: <T = DeckSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeck {
  count: Int;
}

export interface AggregateDeckPromise
  extends Promise<AggregateDeck>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeckSubscription
  extends Promise<AsyncIterator<AggregateDeck>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FlashcardConnection {
  pageInfo: PageInfo;
  edges: FlashcardEdge[];
}

export interface FlashcardConnectionPromise
  extends Promise<FlashcardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FlashcardEdge>>() => T;
  aggregate: <T = AggregateFlashcardPromise>() => T;
}

export interface FlashcardConnectionSubscription
  extends Promise<AsyncIterator<FlashcardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FlashcardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFlashcardSubscription>() => T;
}

export interface FlashcardEdge {
  node: Flashcard;
  cursor: String;
}

export interface FlashcardEdgePromise
  extends Promise<FlashcardEdge>,
    Fragmentable {
  node: <T = FlashcardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FlashcardEdgeSubscription
  extends Promise<AsyncIterator<FlashcardEdge>>,
    Fragmentable {
  node: <T = FlashcardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFlashcard {
  count: Int;
}

export interface AggregateFlashcardPromise
  extends Promise<AggregateFlashcard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFlashcardSubscription
  extends Promise<AsyncIterator<AggregateFlashcard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HanziConnection {
  pageInfo: PageInfo;
  edges: HanziEdge[];
}

export interface HanziConnectionPromise
  extends Promise<HanziConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HanziEdge>>() => T;
  aggregate: <T = AggregateHanziPromise>() => T;
}

export interface HanziConnectionSubscription
  extends Promise<AsyncIterator<HanziConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HanziEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHanziSubscription>() => T;
}

export interface HanziEdge {
  node: Hanzi;
  cursor: String;
}

export interface HanziEdgePromise extends Promise<HanziEdge>, Fragmentable {
  node: <T = HanziPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HanziEdgeSubscription
  extends Promise<AsyncIterator<HanziEdge>>,
    Fragmentable {
  node: <T = HanziSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHanzi {
  count: Int;
}

export interface AggregateHanziPromise
  extends Promise<AggregateHanzi>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHanziSubscription
  extends Promise<AsyncIterator<AggregateHanzi>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DeckSubscriptionPayload {
  mutation: MutationType;
  node: Deck;
  updatedFields: String[];
  previousValues: DeckPreviousValues;
}

export interface DeckSubscriptionPayloadPromise
  extends Promise<DeckSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeckPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeckPreviousValuesPromise>() => T;
}

export interface DeckSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeckSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeckSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeckPreviousValuesSubscription>() => T;
}

export interface DeckPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface DeckPreviousValuesPromise
  extends Promise<DeckPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DeckPreviousValuesSubscription
  extends Promise<AsyncIterator<DeckPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FlashcardSubscriptionPayload {
  mutation: MutationType;
  node: Flashcard;
  updatedFields: String[];
  previousValues: FlashcardPreviousValues;
}

export interface FlashcardSubscriptionPayloadPromise
  extends Promise<FlashcardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FlashcardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FlashcardPreviousValuesPromise>() => T;
}

export interface FlashcardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FlashcardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FlashcardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FlashcardPreviousValuesSubscription>() => T;
}

export interface FlashcardPreviousValues {
  id: ID_Output;
  comfortLevel: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface FlashcardPreviousValuesPromise
  extends Promise<FlashcardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comfortLevel: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FlashcardPreviousValuesSubscription
  extends Promise<AsyncIterator<FlashcardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comfortLevel: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HanziSubscriptionPayload {
  mutation: MutationType;
  node: Hanzi;
  updatedFields: String[];
  previousValues: HanziPreviousValues;
}

export interface HanziSubscriptionPayloadPromise
  extends Promise<HanziSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HanziPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HanziPreviousValuesPromise>() => T;
}

export interface HanziSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HanziSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HanziSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HanziPreviousValuesSubscription>() => T;
}

export interface HanziPreviousValues {
  id: ID_Output;
  traditional: String;
  simplified: String;
  referencedTraditional?: String;
  referencedSimplified?: String;
  pinyinNumeric?: String;
  pinyinDiacritic?: String;
  definitions: String;
  definitionsDiacritic?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface HanziPreviousValuesPromise
  extends Promise<HanziPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  traditional: () => Promise<String>;
  simplified: () => Promise<String>;
  referencedTraditional: () => Promise<String>;
  referencedSimplified: () => Promise<String>;
  pinyinNumeric: () => Promise<String>;
  pinyinDiacritic: () => Promise<String>;
  definitions: () => Promise<String>;
  definitionsDiacritic: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface HanziPreviousValuesSubscription
  extends Promise<AsyncIterator<HanziPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  traditional: () => Promise<AsyncIterator<String>>;
  simplified: () => Promise<AsyncIterator<String>>;
  referencedTraditional: () => Promise<AsyncIterator<String>>;
  referencedSimplified: () => Promise<AsyncIterator<String>>;
  pinyinNumeric: () => Promise<AsyncIterator<String>>;
  pinyinDiacritic: () => Promise<AsyncIterator<String>>;
  definitions: () => Promise<AsyncIterator<String>>;
  definitionsDiacritic: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Flashcard",
    embedded: false
  },
  {
    name: "Deck",
    embedded: false
  },
  {
    name: "Hanzi",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
