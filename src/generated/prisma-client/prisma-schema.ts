// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateDeck {
  count: Int!
}

type AggregateFlashcard {
  count: Int!
}

type AggregateHanzi {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Deck {
  id: ID!
  name: String!
  description: String
  flashcards(where: FlashcardWhereInput, orderBy: FlashcardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flashcard!]
  creator: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type DeckConnection {
  pageInfo: PageInfo!
  edges: [DeckEdge]!
  aggregate: AggregateDeck!
}

input DeckCreateInput {
  id: ID
  name: String!
  description: String
  flashcards: FlashcardCreateManyWithoutDecksInput
  creator: UserCreateOneWithoutDecksInput!
}

input DeckCreateManyWithoutCreatorInput {
  create: [DeckCreateWithoutCreatorInput!]
  connect: [DeckWhereUniqueInput!]
}

input DeckCreateManyWithoutFlashcardsInput {
  create: [DeckCreateWithoutFlashcardsInput!]
  connect: [DeckWhereUniqueInput!]
}

input DeckCreateWithoutCreatorInput {
  id: ID
  name: String!
  description: String
  flashcards: FlashcardCreateManyWithoutDecksInput
}

input DeckCreateWithoutFlashcardsInput {
  id: ID
  name: String!
  description: String
  creator: UserCreateOneWithoutDecksInput!
}

type DeckEdge {
  node: Deck!
  cursor: String!
}

enum DeckOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DeckPreviousValues {
  id: ID!
  name: String!
  description: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

input DeckScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [DeckScalarWhereInput!]
  OR: [DeckScalarWhereInput!]
  NOT: [DeckScalarWhereInput!]
}

type DeckSubscriptionPayload {
  mutation: MutationType!
  node: Deck
  updatedFields: [String!]
  previousValues: DeckPreviousValues
}

input DeckSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeckWhereInput
  AND: [DeckSubscriptionWhereInput!]
  OR: [DeckSubscriptionWhereInput!]
  NOT: [DeckSubscriptionWhereInput!]
}

input DeckUpdateInput {
  name: String
  description: String
  flashcards: FlashcardUpdateManyWithoutDecksInput
  creator: UserUpdateOneRequiredWithoutDecksInput
}

input DeckUpdateManyDataInput {
  name: String
  description: String
}

input DeckUpdateManyMutationInput {
  name: String
  description: String
}

input DeckUpdateManyWithoutCreatorInput {
  create: [DeckCreateWithoutCreatorInput!]
  delete: [DeckWhereUniqueInput!]
  connect: [DeckWhereUniqueInput!]
  set: [DeckWhereUniqueInput!]
  disconnect: [DeckWhereUniqueInput!]
  update: [DeckUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [DeckUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [DeckScalarWhereInput!]
  updateMany: [DeckUpdateManyWithWhereNestedInput!]
}

input DeckUpdateManyWithoutFlashcardsInput {
  create: [DeckCreateWithoutFlashcardsInput!]
  delete: [DeckWhereUniqueInput!]
  connect: [DeckWhereUniqueInput!]
  set: [DeckWhereUniqueInput!]
  disconnect: [DeckWhereUniqueInput!]
  update: [DeckUpdateWithWhereUniqueWithoutFlashcardsInput!]
  upsert: [DeckUpsertWithWhereUniqueWithoutFlashcardsInput!]
  deleteMany: [DeckScalarWhereInput!]
  updateMany: [DeckUpdateManyWithWhereNestedInput!]
}

input DeckUpdateManyWithWhereNestedInput {
  where: DeckScalarWhereInput!
  data: DeckUpdateManyDataInput!
}

input DeckUpdateWithoutCreatorDataInput {
  name: String
  description: String
  flashcards: FlashcardUpdateManyWithoutDecksInput
}

input DeckUpdateWithoutFlashcardsDataInput {
  name: String
  description: String
  creator: UserUpdateOneRequiredWithoutDecksInput
}

input DeckUpdateWithWhereUniqueWithoutCreatorInput {
  where: DeckWhereUniqueInput!
  data: DeckUpdateWithoutCreatorDataInput!
}

input DeckUpdateWithWhereUniqueWithoutFlashcardsInput {
  where: DeckWhereUniqueInput!
  data: DeckUpdateWithoutFlashcardsDataInput!
}

input DeckUpsertWithWhereUniqueWithoutCreatorInput {
  where: DeckWhereUniqueInput!
  update: DeckUpdateWithoutCreatorDataInput!
  create: DeckCreateWithoutCreatorInput!
}

input DeckUpsertWithWhereUniqueWithoutFlashcardsInput {
  where: DeckWhereUniqueInput!
  update: DeckUpdateWithoutFlashcardsDataInput!
  create: DeckCreateWithoutFlashcardsInput!
}

input DeckWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  flashcards_every: FlashcardWhereInput
  flashcards_some: FlashcardWhereInput
  flashcards_none: FlashcardWhereInput
  creator: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [DeckWhereInput!]
  OR: [DeckWhereInput!]
  NOT: [DeckWhereInput!]
}

input DeckWhereUniqueInput {
  id: ID
}

type Flashcard {
  id: ID!
  hanzi: Hanzi!
  user: User!
  comfortLevel: Int!
  decks(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deck!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FlashcardConnection {
  pageInfo: PageInfo!
  edges: [FlashcardEdge]!
  aggregate: AggregateFlashcard!
}

input FlashcardCreateInput {
  id: ID
  hanzi: HanziCreateOneWithoutFlashcardsInput!
  user: UserCreateOneWithoutFlashcardsInput!
  comfortLevel: Int!
  decks: DeckCreateManyWithoutFlashcardsInput
}

input FlashcardCreateManyWithoutDecksInput {
  create: [FlashcardCreateWithoutDecksInput!]
  connect: [FlashcardWhereUniqueInput!]
}

input FlashcardCreateManyWithoutHanziInput {
  create: [FlashcardCreateWithoutHanziInput!]
  connect: [FlashcardWhereUniqueInput!]
}

input FlashcardCreateManyWithoutUserInput {
  create: [FlashcardCreateWithoutUserInput!]
  connect: [FlashcardWhereUniqueInput!]
}

input FlashcardCreateWithoutDecksInput {
  id: ID
  hanzi: HanziCreateOneWithoutFlashcardsInput!
  user: UserCreateOneWithoutFlashcardsInput!
  comfortLevel: Int!
}

input FlashcardCreateWithoutHanziInput {
  id: ID
  user: UserCreateOneWithoutFlashcardsInput!
  comfortLevel: Int!
  decks: DeckCreateManyWithoutFlashcardsInput
}

input FlashcardCreateWithoutUserInput {
  id: ID
  hanzi: HanziCreateOneWithoutFlashcardsInput!
  comfortLevel: Int!
  decks: DeckCreateManyWithoutFlashcardsInput
}

type FlashcardEdge {
  node: Flashcard!
  cursor: String!
}

enum FlashcardOrderByInput {
  id_ASC
  id_DESC
  comfortLevel_ASC
  comfortLevel_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FlashcardPreviousValues {
  id: ID!
  comfortLevel: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input FlashcardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  comfortLevel: Int
  comfortLevel_not: Int
  comfortLevel_in: [Int!]
  comfortLevel_not_in: [Int!]
  comfortLevel_lt: Int
  comfortLevel_lte: Int
  comfortLevel_gt: Int
  comfortLevel_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FlashcardScalarWhereInput!]
  OR: [FlashcardScalarWhereInput!]
  NOT: [FlashcardScalarWhereInput!]
}

type FlashcardSubscriptionPayload {
  mutation: MutationType!
  node: Flashcard
  updatedFields: [String!]
  previousValues: FlashcardPreviousValues
}

input FlashcardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FlashcardWhereInput
  AND: [FlashcardSubscriptionWhereInput!]
  OR: [FlashcardSubscriptionWhereInput!]
  NOT: [FlashcardSubscriptionWhereInput!]
}

input FlashcardUpdateInput {
  hanzi: HanziUpdateOneRequiredWithoutFlashcardsInput
  user: UserUpdateOneRequiredWithoutFlashcardsInput
  comfortLevel: Int
  decks: DeckUpdateManyWithoutFlashcardsInput
}

input FlashcardUpdateManyDataInput {
  comfortLevel: Int
}

input FlashcardUpdateManyMutationInput {
  comfortLevel: Int
}

input FlashcardUpdateManyWithoutDecksInput {
  create: [FlashcardCreateWithoutDecksInput!]
  delete: [FlashcardWhereUniqueInput!]
  connect: [FlashcardWhereUniqueInput!]
  set: [FlashcardWhereUniqueInput!]
  disconnect: [FlashcardWhereUniqueInput!]
  update: [FlashcardUpdateWithWhereUniqueWithoutDecksInput!]
  upsert: [FlashcardUpsertWithWhereUniqueWithoutDecksInput!]
  deleteMany: [FlashcardScalarWhereInput!]
  updateMany: [FlashcardUpdateManyWithWhereNestedInput!]
}

input FlashcardUpdateManyWithoutHanziInput {
  create: [FlashcardCreateWithoutHanziInput!]
  delete: [FlashcardWhereUniqueInput!]
  connect: [FlashcardWhereUniqueInput!]
  set: [FlashcardWhereUniqueInput!]
  disconnect: [FlashcardWhereUniqueInput!]
  update: [FlashcardUpdateWithWhereUniqueWithoutHanziInput!]
  upsert: [FlashcardUpsertWithWhereUniqueWithoutHanziInput!]
  deleteMany: [FlashcardScalarWhereInput!]
  updateMany: [FlashcardUpdateManyWithWhereNestedInput!]
}

input FlashcardUpdateManyWithoutUserInput {
  create: [FlashcardCreateWithoutUserInput!]
  delete: [FlashcardWhereUniqueInput!]
  connect: [FlashcardWhereUniqueInput!]
  set: [FlashcardWhereUniqueInput!]
  disconnect: [FlashcardWhereUniqueInput!]
  update: [FlashcardUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [FlashcardUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [FlashcardScalarWhereInput!]
  updateMany: [FlashcardUpdateManyWithWhereNestedInput!]
}

input FlashcardUpdateManyWithWhereNestedInput {
  where: FlashcardScalarWhereInput!
  data: FlashcardUpdateManyDataInput!
}

input FlashcardUpdateWithoutDecksDataInput {
  hanzi: HanziUpdateOneRequiredWithoutFlashcardsInput
  user: UserUpdateOneRequiredWithoutFlashcardsInput
  comfortLevel: Int
}

input FlashcardUpdateWithoutHanziDataInput {
  user: UserUpdateOneRequiredWithoutFlashcardsInput
  comfortLevel: Int
  decks: DeckUpdateManyWithoutFlashcardsInput
}

input FlashcardUpdateWithoutUserDataInput {
  hanzi: HanziUpdateOneRequiredWithoutFlashcardsInput
  comfortLevel: Int
  decks: DeckUpdateManyWithoutFlashcardsInput
}

input FlashcardUpdateWithWhereUniqueWithoutDecksInput {
  where: FlashcardWhereUniqueInput!
  data: FlashcardUpdateWithoutDecksDataInput!
}

input FlashcardUpdateWithWhereUniqueWithoutHanziInput {
  where: FlashcardWhereUniqueInput!
  data: FlashcardUpdateWithoutHanziDataInput!
}

input FlashcardUpdateWithWhereUniqueWithoutUserInput {
  where: FlashcardWhereUniqueInput!
  data: FlashcardUpdateWithoutUserDataInput!
}

input FlashcardUpsertWithWhereUniqueWithoutDecksInput {
  where: FlashcardWhereUniqueInput!
  update: FlashcardUpdateWithoutDecksDataInput!
  create: FlashcardCreateWithoutDecksInput!
}

input FlashcardUpsertWithWhereUniqueWithoutHanziInput {
  where: FlashcardWhereUniqueInput!
  update: FlashcardUpdateWithoutHanziDataInput!
  create: FlashcardCreateWithoutHanziInput!
}

input FlashcardUpsertWithWhereUniqueWithoutUserInput {
  where: FlashcardWhereUniqueInput!
  update: FlashcardUpdateWithoutUserDataInput!
  create: FlashcardCreateWithoutUserInput!
}

input FlashcardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  hanzi: HanziWhereInput
  user: UserWhereInput
  comfortLevel: Int
  comfortLevel_not: Int
  comfortLevel_in: [Int!]
  comfortLevel_not_in: [Int!]
  comfortLevel_lt: Int
  comfortLevel_lte: Int
  comfortLevel_gt: Int
  comfortLevel_gte: Int
  decks_every: DeckWhereInput
  decks_some: DeckWhereInput
  decks_none: DeckWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FlashcardWhereInput!]
  OR: [FlashcardWhereInput!]
  NOT: [FlashcardWhereInput!]
}

input FlashcardWhereUniqueInput {
  id: ID
}

type Hanzi {
  id: ID!
  traditional: String!
  simplified: String!
  referencedTraditional: String
  referencedSimplified: String
  pinyinNumeric: String
  pinyinDiacritic: String
  definitions: String!
  definitionsDiacritic: String
  updatedAt: DateTime!
  createdAt: DateTime!
  flashcards(where: FlashcardWhereInput, orderBy: FlashcardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flashcard!]
}

type HanziConnection {
  pageInfo: PageInfo!
  edges: [HanziEdge]!
  aggregate: AggregateHanzi!
}

input HanziCreateInput {
  id: ID
  traditional: String!
  simplified: String!
  referencedTraditional: String
  referencedSimplified: String
  pinyinNumeric: String
  pinyinDiacritic: String
  definitions: String!
  definitionsDiacritic: String
  flashcards: FlashcardCreateManyWithoutHanziInput
}

input HanziCreateOneWithoutFlashcardsInput {
  create: HanziCreateWithoutFlashcardsInput
  connect: HanziWhereUniqueInput
}

input HanziCreateWithoutFlashcardsInput {
  id: ID
  traditional: String!
  simplified: String!
  referencedTraditional: String
  referencedSimplified: String
  pinyinNumeric: String
  pinyinDiacritic: String
  definitions: String!
  definitionsDiacritic: String
}

type HanziEdge {
  node: Hanzi!
  cursor: String!
}

enum HanziOrderByInput {
  id_ASC
  id_DESC
  traditional_ASC
  traditional_DESC
  simplified_ASC
  simplified_DESC
  referencedTraditional_ASC
  referencedTraditional_DESC
  referencedSimplified_ASC
  referencedSimplified_DESC
  pinyinNumeric_ASC
  pinyinNumeric_DESC
  pinyinDiacritic_ASC
  pinyinDiacritic_DESC
  definitions_ASC
  definitions_DESC
  definitionsDiacritic_ASC
  definitionsDiacritic_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type HanziPreviousValues {
  id: ID!
  traditional: String!
  simplified: String!
  referencedTraditional: String
  referencedSimplified: String
  pinyinNumeric: String
  pinyinDiacritic: String
  definitions: String!
  definitionsDiacritic: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type HanziSubscriptionPayload {
  mutation: MutationType!
  node: Hanzi
  updatedFields: [String!]
  previousValues: HanziPreviousValues
}

input HanziSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HanziWhereInput
  AND: [HanziSubscriptionWhereInput!]
  OR: [HanziSubscriptionWhereInput!]
  NOT: [HanziSubscriptionWhereInput!]
}

input HanziUpdateInput {
  traditional: String
  simplified: String
  referencedTraditional: String
  referencedSimplified: String
  pinyinNumeric: String
  pinyinDiacritic: String
  definitions: String
  definitionsDiacritic: String
  flashcards: FlashcardUpdateManyWithoutHanziInput
}

input HanziUpdateManyMutationInput {
  traditional: String
  simplified: String
  referencedTraditional: String
  referencedSimplified: String
  pinyinNumeric: String
  pinyinDiacritic: String
  definitions: String
  definitionsDiacritic: String
}

input HanziUpdateOneRequiredWithoutFlashcardsInput {
  create: HanziCreateWithoutFlashcardsInput
  update: HanziUpdateWithoutFlashcardsDataInput
  upsert: HanziUpsertWithoutFlashcardsInput
  connect: HanziWhereUniqueInput
}

input HanziUpdateWithoutFlashcardsDataInput {
  traditional: String
  simplified: String
  referencedTraditional: String
  referencedSimplified: String
  pinyinNumeric: String
  pinyinDiacritic: String
  definitions: String
  definitionsDiacritic: String
}

input HanziUpsertWithoutFlashcardsInput {
  update: HanziUpdateWithoutFlashcardsDataInput!
  create: HanziCreateWithoutFlashcardsInput!
}

input HanziWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  traditional: String
  traditional_not: String
  traditional_in: [String!]
  traditional_not_in: [String!]
  traditional_lt: String
  traditional_lte: String
  traditional_gt: String
  traditional_gte: String
  traditional_contains: String
  traditional_not_contains: String
  traditional_starts_with: String
  traditional_not_starts_with: String
  traditional_ends_with: String
  traditional_not_ends_with: String
  simplified: String
  simplified_not: String
  simplified_in: [String!]
  simplified_not_in: [String!]
  simplified_lt: String
  simplified_lte: String
  simplified_gt: String
  simplified_gte: String
  simplified_contains: String
  simplified_not_contains: String
  simplified_starts_with: String
  simplified_not_starts_with: String
  simplified_ends_with: String
  simplified_not_ends_with: String
  referencedTraditional: String
  referencedTraditional_not: String
  referencedTraditional_in: [String!]
  referencedTraditional_not_in: [String!]
  referencedTraditional_lt: String
  referencedTraditional_lte: String
  referencedTraditional_gt: String
  referencedTraditional_gte: String
  referencedTraditional_contains: String
  referencedTraditional_not_contains: String
  referencedTraditional_starts_with: String
  referencedTraditional_not_starts_with: String
  referencedTraditional_ends_with: String
  referencedTraditional_not_ends_with: String
  referencedSimplified: String
  referencedSimplified_not: String
  referencedSimplified_in: [String!]
  referencedSimplified_not_in: [String!]
  referencedSimplified_lt: String
  referencedSimplified_lte: String
  referencedSimplified_gt: String
  referencedSimplified_gte: String
  referencedSimplified_contains: String
  referencedSimplified_not_contains: String
  referencedSimplified_starts_with: String
  referencedSimplified_not_starts_with: String
  referencedSimplified_ends_with: String
  referencedSimplified_not_ends_with: String
  pinyinNumeric: String
  pinyinNumeric_not: String
  pinyinNumeric_in: [String!]
  pinyinNumeric_not_in: [String!]
  pinyinNumeric_lt: String
  pinyinNumeric_lte: String
  pinyinNumeric_gt: String
  pinyinNumeric_gte: String
  pinyinNumeric_contains: String
  pinyinNumeric_not_contains: String
  pinyinNumeric_starts_with: String
  pinyinNumeric_not_starts_with: String
  pinyinNumeric_ends_with: String
  pinyinNumeric_not_ends_with: String
  pinyinDiacritic: String
  pinyinDiacritic_not: String
  pinyinDiacritic_in: [String!]
  pinyinDiacritic_not_in: [String!]
  pinyinDiacritic_lt: String
  pinyinDiacritic_lte: String
  pinyinDiacritic_gt: String
  pinyinDiacritic_gte: String
  pinyinDiacritic_contains: String
  pinyinDiacritic_not_contains: String
  pinyinDiacritic_starts_with: String
  pinyinDiacritic_not_starts_with: String
  pinyinDiacritic_ends_with: String
  pinyinDiacritic_not_ends_with: String
  definitions: String
  definitions_not: String
  definitions_in: [String!]
  definitions_not_in: [String!]
  definitions_lt: String
  definitions_lte: String
  definitions_gt: String
  definitions_gte: String
  definitions_contains: String
  definitions_not_contains: String
  definitions_starts_with: String
  definitions_not_starts_with: String
  definitions_ends_with: String
  definitions_not_ends_with: String
  definitionsDiacritic: String
  definitionsDiacritic_not: String
  definitionsDiacritic_in: [String!]
  definitionsDiacritic_not_in: [String!]
  definitionsDiacritic_lt: String
  definitionsDiacritic_lte: String
  definitionsDiacritic_gt: String
  definitionsDiacritic_gte: String
  definitionsDiacritic_contains: String
  definitionsDiacritic_not_contains: String
  definitionsDiacritic_starts_with: String
  definitionsDiacritic_not_starts_with: String
  definitionsDiacritic_ends_with: String
  definitionsDiacritic_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  flashcards_every: FlashcardWhereInput
  flashcards_some: FlashcardWhereInput
  flashcards_none: FlashcardWhereInput
  AND: [HanziWhereInput!]
  OR: [HanziWhereInput!]
  NOT: [HanziWhereInput!]
}

input HanziWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDeck(data: DeckCreateInput!): Deck!
  updateDeck(data: DeckUpdateInput!, where: DeckWhereUniqueInput!): Deck
  updateManyDecks(data: DeckUpdateManyMutationInput!, where: DeckWhereInput): BatchPayload!
  upsertDeck(where: DeckWhereUniqueInput!, create: DeckCreateInput!, update: DeckUpdateInput!): Deck!
  deleteDeck(where: DeckWhereUniqueInput!): Deck
  deleteManyDecks(where: DeckWhereInput): BatchPayload!
  createFlashcard(data: FlashcardCreateInput!): Flashcard!
  updateFlashcard(data: FlashcardUpdateInput!, where: FlashcardWhereUniqueInput!): Flashcard
  updateManyFlashcards(data: FlashcardUpdateManyMutationInput!, where: FlashcardWhereInput): BatchPayload!
  upsertFlashcard(where: FlashcardWhereUniqueInput!, create: FlashcardCreateInput!, update: FlashcardUpdateInput!): Flashcard!
  deleteFlashcard(where: FlashcardWhereUniqueInput!): Flashcard
  deleteManyFlashcards(where: FlashcardWhereInput): BatchPayload!
  createHanzi(data: HanziCreateInput!): Hanzi!
  updateHanzi(data: HanziUpdateInput!, where: HanziWhereUniqueInput!): Hanzi
  updateManyHanzis(data: HanziUpdateManyMutationInput!, where: HanziWhereInput): BatchPayload!
  upsertHanzi(where: HanziWhereUniqueInput!, create: HanziCreateInput!, update: HanziUpdateInput!): Hanzi!
  deleteHanzi(where: HanziWhereUniqueInput!): Hanzi
  deleteManyHanzis(where: HanziWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  deck(where: DeckWhereUniqueInput!): Deck
  decks(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deck]!
  decksConnection(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeckConnection!
  flashcard(where: FlashcardWhereUniqueInput!): Flashcard
  flashcards(where: FlashcardWhereInput, orderBy: FlashcardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flashcard]!
  flashcardsConnection(where: FlashcardWhereInput, orderBy: FlashcardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FlashcardConnection!
  hanzi(where: HanziWhereUniqueInput!): Hanzi
  hanzis(where: HanziWhereInput, orderBy: HanziOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hanzi]!
  hanzisConnection(where: HanziWhereInput, orderBy: HanziOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HanziConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  deck(where: DeckSubscriptionWhereInput): DeckSubscriptionPayload
  flashcard(where: FlashcardSubscriptionWhereInput): FlashcardSubscriptionPayload
  hanzi(where: HanziSubscriptionWhereInput): HanziSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  flashcards(where: FlashcardWhereInput, orderBy: FlashcardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flashcard!]
  decks(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deck!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  password: String!
  flashcards: FlashcardCreateManyWithoutUserInput
  decks: DeckCreateManyWithoutCreatorInput
}

input UserCreateOneWithoutDecksInput {
  create: UserCreateWithoutDecksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFlashcardsInput {
  create: UserCreateWithoutFlashcardsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDecksInput {
  id: ID
  username: String!
  email: String!
  password: String!
  flashcards: FlashcardCreateManyWithoutUserInput
}

input UserCreateWithoutFlashcardsInput {
  id: ID
  username: String!
  email: String!
  password: String!
  decks: DeckCreateManyWithoutCreatorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  flashcards: FlashcardUpdateManyWithoutUserInput
  decks: DeckUpdateManyWithoutCreatorInput
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutDecksInput {
  create: UserCreateWithoutDecksInput
  update: UserUpdateWithoutDecksDataInput
  upsert: UserUpsertWithoutDecksInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutFlashcardsInput {
  create: UserCreateWithoutFlashcardsInput
  update: UserUpdateWithoutFlashcardsDataInput
  upsert: UserUpsertWithoutFlashcardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutDecksDataInput {
  username: String
  email: String
  password: String
  flashcards: FlashcardUpdateManyWithoutUserInput
}

input UserUpdateWithoutFlashcardsDataInput {
  username: String
  email: String
  password: String
  decks: DeckUpdateManyWithoutCreatorInput
}

input UserUpsertWithoutDecksInput {
  update: UserUpdateWithoutDecksDataInput!
  create: UserCreateWithoutDecksInput!
}

input UserUpsertWithoutFlashcardsInput {
  update: UserUpdateWithoutFlashcardsDataInput!
  create: UserCreateWithoutFlashcardsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  flashcards_every: FlashcardWhereInput
  flashcards_some: FlashcardWhereInput
  flashcards_none: FlashcardWhereInput
  decks_every: DeckWhereInput
  decks_some: DeckWhereInput
  decks_none: DeckWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`